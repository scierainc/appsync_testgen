// src/templates/jest/reporter.ts
export function getOnfailReporterJs(): string {
  return `
// Auto-generated by AppSync TestGen
const fs = require("node:fs");
const path = require("node:path");

const ARTIFACT_DIR = process.env.APPSYNC_ARTIFACT_DIR || "artifacts";

/**
 * Copies the newest *.last.json to *.json when any test in a file fails,
 * mirroring the pytest on-fail behavior.
 */
class OnFailReporter {
  onTestResult(_test, testResult) {
    const failed = testResult.testResults.some(t => t.status === "failed");
    const policy = (process.env.APPSYNC_WRITE_ARTIFACTS || "onfail").toLowerCase();
    if (!failed || policy !== "onfail") return;

    try {
      const root = path.resolve(process.cwd(), ARTIFACT_DIR);
      if (!fs.existsSync(root)) return;

      const files = walk(root).filter(p => p.endsWith(".last.json"));
      if (!files.length) return;

      const newest = files
        .map(p => ({ p, m: fs.statSync(p).mtimeMs }))
        .sort((a, b) => b.m - a.m)[0].p;

      const out = newest.replace(/\\.last\\.json$/, ".json");
      ensureDir(path.dirname(out));
      fs.copyFileSync(newest, out);
      // eslint-disable-next-line no-console
      console.log("[artifacts] saved:", out);
    } catch (e) {
      // eslint-disable-next-line no-console
      console.warn("[artifacts] copy failed:", e && e.message || e);
    }
  }
}

function walk(dir) {
  const out = [];
  for (const name of fs.readdirSync(dir)) {
    const p = path.join(dir, name);
    const st = fs.statSync(p);
    if (st.isDirectory()) out.push(...walk(p));
    else out.push(p);
  }
  return out;
}

function ensureDir(d) {
  fs.mkdirSync(d, { recursive: true });
}

module.exports = OnFailReporter;
`.trimStart();
}
