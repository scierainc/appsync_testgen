// src/templates/jest/client.ts
export function getGraphqlClientJs(): string {
  return `
// Auto-generated by AppSync TestGen
// Minimal GraphQL client for Jest tests (API_KEY & COGNITO JWT)
const { setTimeout: delay } = require("node:timers/promises");

const APPSYNC_ENDPOINT = (process.env.APPSYNC_ENDPOINT || "").trim();
const AUTH_MODE       = (process.env.APPSYNC_AUTH_MODE || "API_KEY").toUpperCase();
const API_KEY         = (process.env.APPSYNC_API_KEY || "").trim();
const COGNITO_JWT     = (process.env.APPSYNC_JWT || "").trim();
const TIMEOUT_MS      = Number(process.env.APPSYNC_TIMEOUT_MS || "60000");

function headers() {
  const h = { "content-type": "application/json" };
  if (AUTH_MODE === "API_KEY") {
    if (!API_KEY) throw new Error("APPSYNC_API_KEY is required for AUTH_MODE=API_KEY");
    h["x-api-key"] = API_KEY;
  } else if (AUTH_MODE === "COGNITO") {
    if (!COGNITO_JWT) throw new Error("APPSYNC_JWT is required for AUTH_MODE=COGNITO");
    h["authorization"] = COGNITO_JWT;
  } else if (AUTH_MODE === "IAM") {
    // Keep default client simple; IAM needs SigV4 (provide a Node signer separately if needed).
    throw new Error("AUTH_MODE=IAM not implemented in Jest client. Use your Node SigV4 helper instead.");
  } else {
    throw new Error("Unknown APPSYNC_AUTH_MODE: " + AUTH_MODE);
  }
  return h;
}

async function gqlRequest(query, variables) {
  if (!APPSYNC_ENDPOINT) throw new Error("APPSYNC_ENDPOINT is not set");
  const ctrl = new AbortController();
  const t = setTimeout(() => ctrl.abort(), TIMEOUT_MS).unref?.() ?? undefined;
  try {
    const res = await fetch(APPSYNC_ENDPOINT, {
      method: "POST",
      headers: headers(),
      body: JSON.stringify({ query, variables: variables || {} }),
      signal: ctrl.signal
    });
    let json;
    try {
      json = await res.json();
    } catch {
      json = { _non_json_response: await res.text() };
    }
    return json;
  } finally {
    if (t) clearTimeout(t);
    await delay(10); // tiny backoff
  }
}

module.exports = { gqlRequest };
`.trimStart();
}
